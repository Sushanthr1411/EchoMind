import jsPDF from "jspdf";

interface DownloadPDFButtonProps {
  transcript: string;
  summary: string;
  tasks: { text: string; deadline?: string | null }[];
}

export function DownloadPDFButton({ transcript, summary, tasks }: DownloadPDFButtonProps) {
  const handleDownload = () => {
    const doc = new jsPDF();
    const pageHeight = doc.internal.pageSize.height;
    const pageWidth = doc.internal.pageSize.width;
    const margin = 20; // Consistent margin
    let y = margin + 10; // Start position for content below the header

    const addHeader = (pageNumber: number) => {
      doc.setFontSize(10);
      doc.text("EchoMind", margin, 10); // Add EchoMind name in the header
      doc.text(`Page ${pageNumber}`, pageWidth - margin, 10, { align: "right" }); // Add page number in the header
    };

    const addFooter = () => {
      doc.setFontSize(10);
      doc.text("Generated by EchoMind", margin, pageHeight - 10); // Add footer text
    };

    const addCoverPage = () => {
      doc.setFontSize(24);
      doc.text("EchoMind Report", pageWidth / 2, pageHeight / 2 - 20, { align: "center" });
      doc.setFontSize(16);
      doc.text("Generated on: August 13, 2025", pageWidth / 2, pageHeight / 2, { align: "center" });
      doc.addPage();
    };

    const addContent = () => {
      let pageNumber = 1;
      addHeader(pageNumber);

      // Add Transcript
      doc.setFontSize(16);
      doc.setTextColor(0, 102, 255); // Brighter blue for section titles
      doc.text("Transcript", margin, y);
      y += 10;
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0); // Reset text color
      const transcriptLines: string[] = doc.splitTextToSize(transcript, pageWidth - 2 * margin);
      transcriptLines.forEach((line: string) => {
        if (y + 10 > pageHeight - margin) {
          addFooter();
          doc.addPage();
          pageNumber++;
          addHeader(pageNumber);
          y = margin + 10;
        }
        doc.text(line, margin, y);
        y += 10;
      });

      // Add Summary
      if (y + 20 > pageHeight - margin) {
        addFooter();
        doc.addPage();
        pageNumber++;
        addHeader(pageNumber);
        y = margin + 10;
      }
      doc.setFontSize(16);
      doc.setTextColor(0, 102, 255);
      doc.text("Summary", margin, y);
      y += 10;
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      const summaryLines: string[] = doc.splitTextToSize(summary, pageWidth - 2 * margin);
      summaryLines.forEach((line: string) => {
        if (y + 10 > pageHeight - margin) {
          addFooter();
          doc.addPage();
          pageNumber++;
          addHeader(pageNumber);
          y = margin + 10;
        }
        doc.text(line, margin, y);
        y += 10;
      });

      // Add Tasks
      if (y + 20 > pageHeight - margin) {
        addFooter();
        doc.addPage();
        pageNumber++;
        addHeader(pageNumber);
        y = margin + 10;
      }
      doc.setFontSize(16);
      doc.setTextColor(0, 102, 255);
      doc.text("Tasks", margin, y);
      y += 10;
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      tasks.forEach((task, index) => {
        const taskText = `${index + 1}. ${task.text}${task.deadline ? ` (Deadline: ${task.deadline})` : ""}`;
        if (y + 10 > pageHeight - margin) {
          addFooter();
          doc.addPage();
          pageNumber++;
          addHeader(pageNumber);
          y = margin + 10;
        }
        doc.text(taskText, margin, y);
        y += 10;
      });

      addFooter();
    };

    addCoverPage();
    addContent();

    // Save the PDF
    doc.save("EchoMind_Report.pdf");
  };

  return (
    <button
      onClick={handleDownload}
      className="px-4 py-2 bg-blue-500 text-white rounded shadow hover:bg-blue-600"
    >
      Download as PDF
    </button>
  );
}
